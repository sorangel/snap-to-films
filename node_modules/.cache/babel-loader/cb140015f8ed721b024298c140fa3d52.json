{"ast":null,"code":"var _jsxFileName = \"/home/sora/Escritorio/Archivos-de-ReactjS/snap-to-films/src/App.js\";\n// importamos todas las dependencias necesarias\nimport React, { Component } from \"react\"; //importamos todos los componentes necesarios\n\nimport Header from \"./components/Header\";\nimport Filters from \"./components/Filters\";\nimport Films from \"./components/Films\";\nimport Footer from \"./components/Footer\"; // importamos funciones necesarias para hacer peticiones  a la API/servidor\n\nimport { getMovies, getMoviesByYear, searchMovies, getYearsAvailable, getCategories } from \"./api\"; // importamos los estilos necesarios\n\nimport \"./reset.css\";\nimport \"./App.css\"; // creamos un componente react\n\nexport default class App extends Component {\n  // esta funcion especial se ejecuta  inmediatamente cuando se usa\n  constructor(props) {\n    // con super le damos permiso para leer y escribir en las propiedades/atributos q se le pasan a este componente\n    super(props); // creamos el estado de nuestro componente para poder interactuar con el\n\n    this.getPaginationByYear = (options = {}) => {\n      getMoviesByYear(options).then(data => data.json()).then(myDataJson => {\n        console.log(myDataJson);\n        this.setState({\n          movies: myDataJson.movies.sort()\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.searchMovies = (options = {}) => {\n      searchMovies(options).then(myData => myData.json()).then(myDatajson => {\n        console.log(myDatajson);\n        this.setState({\n          movies: myDatajson.movies\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.getPagination = (pag = 1) => {\n      //    esta funcion optiene la ppeliculas y recibe de forma opcional un objeto, dicho objeto puede contener los valores( paginacon= numero)\n      getMovies({\n        pagination: pag\n      }) // este then optiene los datos recibidos por getMovies y los convierte en un json/objeto\n      .then(data => data.json()) //a partir de aqui podemos ejecutar todos los then q necesitemos\n      .then(myDataJson => {\n        // esta funcion actualiza los datos del estado , en este caso estamos actualizando el valor movie\n        this.setState({\n          movies: myDataJson.movies\n        });\n      }) //el catch es como un then con la unica diferencia de que esta funcion te facilita el error para poder saber lo q paso por si algo sucede\n      .catch(error => console.log(error));\n    };\n\n    this.getYearsAvailable = options => {\n      getYearsAvailable(options).then(data => data.json()).then(dataJson => {\n        dataJson.years.sort((a, b) => {\n          if (parseInt(a) > parseInt(b)) {\n            return -1;\n          }\n\n          if (parseInt(a) < parseInt(b)) {\n            return 1;\n          }\n\n          return 0;\n        });\n        this.setState({\n          yearsAvailable: dataJson.years\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.getCategories = options => {\n      getCategories(options).then(data => data.json()).then(dataJson => {\n        this.setState({\n          categories: dataJson.data\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.state = {\n      //creamos el valor movies dentro de este estado como un array vacio\n      movies: [],\n      yearsAvailable: [],\n      categories: []\n    };\n  } // esta funcion especial de un componente react se ejecuta cuando el componente es mostrado o montado por primera vez en el DOM/html\n\n\n  componentDidMount() {\n    // usamos esta funcion para optener las peliculas de la pagina 6\n    this.getPagination();\n    this.getYearsAvailable();\n    /*\n    this.getPaginationByYear({\n        pagination: 1,\n        filterBy: \"year\",\n        filterValue: 2010\n    });\n      */\n  }\n\n  render() {\n    const movie = !!this.state.movies ? this.state.movies[0] : {};\n    return /*#__PURE__*/React.createElement(\"main\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      movie: movie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Filters, {\n      yearsAvailable: this.state.yearsAvailable,\n      searchMovies: this.searchMovies,\n      getPagination: this.getPagination,\n      getPaginationByYear: this.getPaginationByYear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Films, {\n      movies: this.state.movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/sora/Escritorio/Archivos-de-ReactjS/snap-to-films/src/App.js"],"names":["React","Component","Header","Filters","Films","Footer","getMovies","getMoviesByYear","searchMovies","getYearsAvailable","getCategories","App","constructor","props","getPaginationByYear","options","then","data","json","myDataJson","console","log","setState","movies","sort","catch","error","myData","myDatajson","getPagination","pag","pagination","dataJson","years","a","b","parseInt","yearsAvailable","categories","state","componentDidMount","render","movie"],"mappings":"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","sourcesContent":["// importamos todas las dependencias necesarias\nimport React, { Component } from \"react\";\n\n//importamos todos los componentes necesarios\nimport Header from \"./components/Header\";\nimport Filters from \"./components/Filters\";\nimport Films from \"./components/Films\";\nimport Footer from \"./components/Footer\";\n\n// importamos funciones necesarias para hacer peticiones  a la API/servidor\nimport {\n  getMovies,\n  getMoviesByYear,\n  searchMovies,\n  getYearsAvailable,\n    getCategories\n} from \"./api\";\n\n// importamos los estilos necesarios\nimport \"./reset.css\";\nimport \"./App.css\";\n\n// creamos un componente react\nexport default class App extends Component {\n  // esta funcion especial se ejecuta  inmediatamente cuando se usa\n  constructor(props) {\n    // con super le damos permiso para leer y escribir en las propiedades/atributos q se le pasan a este componente\n    super(props);\n\n    // creamos el estado de nuestro componente para poder interactuar con el\n    this.state = {\n      //creamos el valor movies dentro de este estado como un array vacio\n      movies: [],\n      yearsAvailable: [],\n        categories:[]\n    };\n  }\n\n  // esta funcion especial de un componente react se ejecuta cuando el componente es mostrado o montado por primera vez en el DOM/html\n  componentDidMount() {\n    // usamos esta funcion para optener las peliculas de la pagina 6\n    this.getPagination();\n    this.getYearsAvailable();\n\n      /*\n      this.getPaginationByYear({\n          pagination: 1,\n          filterBy: \"year\",\n          filterValue: 2010\n      });\n\n       */\n  }\n\n  getPaginationByYear = (options = {}) => {\n    getMoviesByYear(options)\n      .then(data => data.json())\n      .then(myDataJson => {\n        console.log(myDataJson);\n        this.setState({\n          movies: myDataJson.movies.sort()\n        });\n      })\n      .catch(error => console.log(error));\n  };\n\n  searchMovies = (options = {}) => {\n    searchMovies(options)\n      .then(myData => myData.json())\n      .then(myDatajson => {\n        console.log(myDatajson);\n        this.setState({ movies: myDatajson.movies });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  //    esta  funcion recibe un numero que corresponde a la pagina de peliculas que se quiere\n  getPagination = (pag = 1) => {\n    //    esta funcion optiene la ppeliculas y recibe de forma opcional un objeto, dicho objeto puede contener los valores( paginacon= numero)\n    getMovies({ pagination: pag })\n      // este then optiene los datos recibidos por getMovies y los convierte en un json/objeto\n      .then(data => data.json())\n      //a partir de aqui podemos ejecutar todos los then q necesitemos\n      .then(myDataJson => {\n        // esta funcion actualiza los datos del estado , en este caso estamos actualizando el valor movie\n        this.setState({\n          movies: myDataJson.movies\n        });\n      })\n      //el catch es como un then con la unica diferencia de que esta funcion te facilita el error para poder saber lo q paso por si algo sucede\n      .catch(error => console.log(error));\n  };\n\n  getYearsAvailable = options => {\n    getYearsAvailable(options)\n      .then(data => data.json())\n      .then(dataJson => {\n          dataJson.years.sort((a,b) => {\n              if(parseInt(a) > parseInt(b)) {\n                  return -1\n              }\n\n              if(parseInt(a) < parseInt(b)) {\n                  return 1\n              }\n\n              return 0;\n          });\n        this.setState({ yearsAvailable: dataJson.years });\n      })\n      .catch(error => console.log(error));\n  };\n\n    getCategories = options => {\n        getCategories(options)\n            .then(data => data.json())\n            .then(dataJson => {\n                this.setState({ categories: dataJson.data });\n            })\n            .catch(error => console.log(error));\n    };\n\n  render() {\n    const movie = !!this.state.movies ? this.state.movies[0] : {};\n    return (\n      <main className=\"main\">\n        <Header movie={movie} />\n        <Filters\n          yearsAvailable={this.state.yearsAvailable}\n          searchMovies={this.searchMovies}\n          getPagination={this.getPagination}\n          getPaginationByYear={this.getPaginationByYear}\n        />\n        <Films movies={this.state.movies} />\n        <Footer />\n      </main>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}